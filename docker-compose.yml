services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
    ports:
      - 1433:1433
    volumes:
      - ./data:/var/opt/mssql/data
      - ./init.sql:/init.sql
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    networks:
      - sqlnetwork

  strapi-db:
    image: postgres:15
    container_name: strapi-db
    ports:
    - "5432:5432"
    environment:
      POSTGRES_DB: strapi
      POSTGRES_USER: strapi
      POSTGRES_PASSWORD: strapi
    volumes:
      - strapi-data:/var/lib/postgresql/data
    networks:
      - sqlnetwork
      
  strapi:
    build:
      context: ./Back/StrapiCMS
      dockerfile: Dockerfile
    container_name: strapi
    ports:
      - "1337:1337"
    env_file:
      - .env
    depends_on:
      - strapi-db
    volumes:
      - ./Back/StrapiCMS:/opt/app
      - /app/node_modules
    networks:
      - sqlnetwork

  api:
    build:
      context: ./Back
      dockerfile: Dockerfile
    container_name: api
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DevConnection=${ConnectionStrings__DevConnection_Docker}
    ports:
      - "5000:80"
    depends_on:
      - sqlserver
    networks:
      - sqlnetwork
    volumes:
      - ./Back:/src/BookAPI
    command: dotnet watch run --urls http://0.0.0.0:80


  angular-dev:
    build:
      context: ./Front
      dockerfile: Dockerfile.dev
    container_name: angular-dev
    ports:
      - "4200:4200"
    volumes:
      - ./Front:/app:delegated
    depends_on:
      - api
    networks:
      - sqlnetwork

  angular-prod:
    build:
      context: ./Front
      dockerfile: Dockerfile.nginx
    container_name: angular-prod
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - sqlnetwork

  react:
    build:
      context: ./FrontReactJs
      dockerfile: Dockerfile
    container_name: react
    ports:
      - '3000:3000'
    environment:
      - PORT=3000
    volumes:
      - ./FrontReactJs:/app
      - ./scripts:/scripts:ro
      - ./.env:/env/.env:ro
    depends_on:
      - api
    networks:
      - sqlnetwork
    command: sh -c "node /scripts/sync-react-env.js && npm run dev"


  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - sqlnetwork

networks:
  sqlnetwork:

volumes:
  jenkins_home:
  strapi-data:
